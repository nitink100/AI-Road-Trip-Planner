import google.generativeai as genai

class GeminiClient:
    """
    A client for interacting with the Google Gemini API.
    This class encapsulates the configuration and request logic for the model.
    """
    def __init__(self, api_key):
        """
        Initializes the Gemini client with the provided API key.

        Args:
            api_key (str): Your API key for the Gemini service.
        
        Raises:
            ValueError: If the API key is not provided.
        """
        if not api_key:
            raise ValueError("Gemini API key is missing. Please check your .env file.")
        
        genai.configure(api_key=api_key)
        
        # Initialize the specific model we want to use. 'gemini-1.5-flash' is fast and capable.
        self.model = genai.GenerativeModel('gemini-1.5-flash')

    def generate_content(self, prompt):
        """
        Generates content using the configured Gemini model.

        Args:
            prompt (str): The text prompt to send to the language model.

        Returns:
            str: The text response generated by the model, or an error message.
        """
        try:
            # Send the prompt to the API and get the response
            response = self.model.generate_content(prompt)
            # The actual text content is in the 'text' attribute of the response
            return response.text
        except Exception as e:
            # Provide a clear error message if the API call fails
            print(f"An error occurred while communicating with the Gemini API: {e}")
            return "Sorry, I was unable to generate a response at this time."

# This block allows you to test this file directly to ensure your API key is working
if __name__ == "__main__":
    import os
    from dotenv import load_dotenv
    
    # Load API key from a .env file in the parent directory
    load_dotenv()
    test_api_key = os.getenv("GEMINI_API_KEY")

    if not test_api_key:
        print("Please set your GEMINI_API_KEY in a .env file to run this test.")
    else:
        print("--- Testing Gemini Client ---")
        try:
            client = GeminiClient(test_api_key)
            test_prompt = "Explain what a Large Language Model is in one sentence."
            print(f"Sending prompt: '{test_prompt}'")
            
            response_text = client.generate_content(test_prompt)
            
            print("\nReceived response:")
            print(response_text)
            
            if "language model" in response_text.lower():
                print("\nTest passed!")
            else:
                print("\nTest may have failed: Response did not contain expected keywords.")
                
        except Exception as e:
            print(f"\nTest failed with an error: {e}")